---
title: "Client Transparency: Something to Show vs Something Done"
date: 2016-10-08 13:54 UTC
author: Paul Scarrone
category: development
tags: web development, life, business
---

Story time, I was working for another consultancy to increase their development speed and improve relations with a high profile client. They had been struggling for a while to find a full-time employee that could pick up the project. In the mean time to maintain the relationship with their client they were doing weekly demos and trying to show features at each demo. Here is the week breakdown: 34 hours of development on features and 6 hours were spent preparing for the weekly demo. The effect of the speed these features were being pushed to production were: no testing, constant regressions, and incomplete features. Eventually, the accumulation of technical debt from these reached a critical mass where new features could not be developed what was 6 hours a week preparing for the demo became 12 and then 24 hours.

All was not lost and we were able to work with the stakeholders to repair the relationship. First, we slowed the rate of feature releases and communicated more often with the client. When we feel stressed and get behind we often fear being honest because we don't want to experience people being mad at us. Its odd because we know they are mad at us but if we can avoid confronting it we do. This is just our minds protecting us from harm, don't listen to your mind instead use your common sense and empathy. Instead of communicating feature releases we focused on expressing when bugs were being fixed and asking the client to verify smaller specification often. As a result they didn't immediately notice that feature releases had slowed. Then we moved to a two-week sprint and demoed what features had been in production the week before. Finally, and most importantly when they expressed a concern over speed we owned it and explained the condition that led us to be so deep in technical debt. I am not going to pretend they were happy and we politely listened as they expressed their feelings. They learned that we had given them a false sense of expectation which is really why they were mad in the end. That is not all we did make recompense for unintentionally misleading them with some service discounts. Now, things are on the level, they communicate their expectations and the status of meeting those expectations is frequently exchanged.

A challenge for those who hire technology consultancies like SavvySoftWorks is understanding releases and project progress. The way that we work is we work week to week with you to solve whatever technical issue you came to us with. We prefer not to attempt to fix-rate a product or ask you to sign a 6 month contract. When the work is done we are happy to move on and our customers love the freedom of basically renting a full development team on the spot for as long as they desire.

Working week-to-week or sprint-to-sprint with a client requires constant communication so all projects are automatically assigned a project manager. We do this so we can gain an intimate awareness of your projects domain and what communication style works best for you. Everything is tailor made to the project not just the code itself. We have learned that constant communication almost always trumps sprint demos.

I think it makes sense that a feature is done when the specification is met but to assume that all features can be finished and released within a single sprint is treacherous road to walk. It is not too uncommon for me to coach a development team to approach this problem in two ways. Breaking down a project into consumable tasks and "don't work for the demo".

The first provides more checkpoints for code review and specification review as a feature is developed. If you are following an agile process this means one task to one code review followed by a push to production. I like to deploy code as often as I can but that doesn't mean I tell the client about it. By all means don't wait until the morning of the client demo to deploy. In fact the days I delay deploys are client demos and product launches.

Delaying deploys before client demos is part of "don't work for the demo". You should plan your demo based upon what has already been done. I like to use the analogy of a TV show. Don't be the __Tonight Show__, instead have a feature backlog, a few episodes already on the shelf. If you are releasing often you always have something to show that is done and you can save the in progress material to next week.

I know you are stressed that your client will think you are not getting enough done and fire you but think of it this way. If you have been releasing solid features and working to fulfill the specification instead of the appearance of feature completeness do you know who will likely not be calling you on the weekend? Your client, who may not have all the features yet but the features they do have work. The alternative is incomplete features that don't meet the specification and become technical debt aka wasted development time and the eventual loss of the client.

Your mileage may vary, but I have never failed when I set realistic expectations, communicate often, and be honest/transparent about progress.
